<?php use Amderbar\Lib\View; ?>
<?php View::obStart('vue_components'); ?>
<?php /* データテーブルのセルに関するコンポーネント */?>
<script type="text/x-template" id="data-cell-template">
    <thd v-bind:tag="tag_name" @click="focus">
            <component class="data-form"
                    :is="component_type"
                    :type="form_type"
                    :name="form_name"
                    :value="cell"
                    :options="form_options"
                    :readonly="!focused"
                    :disabled="!is_modified && !focused && name != 'id'"
                    @change="emitChange"
                    @keydown-enter="shiftRow"
                    @keydown-tab="shiftColumn"
                    @keydown-esc="blur"
                    @blur="blur">
            </component>
    </thd>
</script><script type="text/javascript">
    Vue.component('data-cell', {
        template: '#data-cell-template',
        props: ['idx', 'name', 'cell', 'config', 'modified'],
        data: function () { return {
            focused: false
        }},
        computed: {
            my_conf: function () {
                    return this.config[Object.keys(this.config).find(function (key) {
                        return key == this.name;
                    }, this)];
                },
            tag_name: function () { return (this.name == 'id') ? 'h' : 'd'; },
            form_type: function () { return this.my_conf.type; },
            form_options: function () { return this.my_conf.ref || []; },
            form_name: function () { return this.name + '[' + this.idx + ']'; },
            component_type: function () {
                    return this.form_type == 'textarea' ? 'text-area'
                            : this.form_type == 'select' ? 'select-box' : 'input-type';
                },
            is_modified: function () { return (this.modified || []).includes(this.form_name); }
        },
        methods: {
            focus: function (event) {
                this.focused = true;
                var target = event.currentTarget || event.target;
                Vue.nextTick(function () {
                    setTimeout(function () {
                        $(target).children('.data-form').focus();
                    }, 10);
                });
            },
            blur: function () {
                this.focused = false;
            },
            shiftColumn: function (event) {
                var shift_step = event.shiftKey ? -1 : 1;
                var idx = $('.editable').index($(event.target).closest('.editable'));
                $('.editable').eq(idx + shift_step).click();
            },
            shiftRow: function (event) {
                if(!event.shiftKey && event.ctrlKey && this.idx == null) {
                    this.emitPush(event.target.value);
                    event.target.value = this.cell;
                } else if (event.shiftKey || event.ctrlKey) {
                    var shift_step = event.shiftKey ? -1 : 1;
                    var selector = '[name^="' + this.name + '"]';
                    var idx = $(selector).index($(event.target).closest('.editable').find(selector));
                    Vue.nextTick(function () {
                        $(selector).eq(idx + shift_step).closest('.editable').click();
                    });
                }
            },
            emitChange: function (new_val) {
                this.$emit('change', new_val, this.name);
            },
            emitPush: function (new_val) {
                this.$emit('push', new_val, this.name);
            }
        },
        components: { 'thd': {
            render: function (createElement) {
                return createElement('t' + this.tag, {
                    'class': {
                        'id-col': (this.tag == 'h'),
                        editable: (this.tag == 'd')
                    },
                    on: { click: this.emitClick }
                }, this.$slots.default);
            },
            props: {
                tag: {
                    type: String,
                    required: true
                }
            },
            methods: {
                emitClick: function (event) { this.$emit('click', event); }
            }
        }}
    });

    var formComponentMixin = {
        props: ['name', 'value'],
        methods: {
            emitChange: function (new_val) {
                this.$emit('change', new_val);
            },
            emitEvent: function (eve_name, event) {
                this.$emit(eve_name, event);
            }
        }
    };
</script>

<?php /* 入力フォーム関するコンポーネント */?>
<script type="text/x-template" id="input-template">
    <input :type="type"
           :name="name"
           :value="value"
           @change.trim="emitChange($event.target.value)"
           @keydown.enter.prevent="emitEvent('keydown-enter', $event)"
           @keydown.tab.stop="emitEvent('keydown-tab', $event)"
           @keydown.esc="emitEvent('keydown-esc', $event)"
           @blur="emitEvent('blur', $event)">
</script><script type="text/javascript">
    Vue.component('input-type', {
        template: '#input-template',
        mixins: [formComponentMixin],
        props: ['type']
    });
</script>

<?php /* テキストエリアに関するコンポーネント */?>
<script type="text/x-template" id="textarea-template">
    <textarea :name="name"
           :value="value"
           @change.trim="emitChange($event.target.value)"
           @keydown.enter.prevent="emitEvent('keydown-enter', $event)"
           @keydown.tab.stop="emitEvent('keydown-tab', $event)"
           @keydown.esc="emitEvent('keydown-esc', $event)"
           @blur="emitEvent('blur', $event)">
</script><script type="text/javascript">
    Vue.component('text-area', {
        template: '#textarea-template',
        mixins: [formComponentMixin]
    });
</script>

<?php /* セレクトボックスに関するコンポーネント */?>
<script type="text/x-template" id="select-template">
    <select :name="name"
           :value="value"
           @change="emitChange($event.target.value)"
           @keydown.enter.prevent="emitEvent('keydown-enter', $event)"
           @keydown.tab.stop="emitEvent('keydown-tab', $event)"
           @keydown.esc="emitEvent('keydown-esc', $event)"
           @blur="emitEvent('blur', $event)">
        <option v-for="(txt, value) in options"
                :key="value"
                :value="value">
            {{ txt }}
        </option>
    </select>
</script><script type="text/javascript">
    Vue.component('select-box', {
        template: '#select-template',
        mixins: [formComponentMixin],
        props: ['options']
    });
</script>
<?php View::obEnd(); ?>
